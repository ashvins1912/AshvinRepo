public void validateAndInsertContractCode(List<ContractCode> existingList, ContractCode newCode) {

    // Filter out self (if updating)
    existingList = existingList.stream()
            .filter(obj -> !obj.getId().equals(newCode.getId()))
            .collect(Collectors.toList());

    // Add the new contract code for validation
    existingList.add(newCode);

    // Sort list by Effective Date
    existingList.sort(Comparator.comparing(ContractCode::getContractEffDate));

    List<ContractCode> validatedList = new ArrayList<>();

    for (ContractCode code : existingList) {
        // Rule 1: EffDate should not equal TermDate
        if (code.getContractEffDate().isEqual(code.getContractTermDate())) {
            throw new IntegrationInvalidException("ContractEffDate and ContractTermDate cannot be the same: " + code.getContractEffDate());
        }

        // Rule 2: No duplicate EffDate
        boolean duplicateEffDate = validatedList.stream()
                .anyMatch(e -> e.getContractEffDate().isEqual(code.getContractEffDate()));

        if (duplicateEffDate) {
            throw new IntegrationInvalidException("Duplicate ContractEffDate found: " + code.getContractEffDate());
        }

        // Rule 3: No duplicate EffDate + TermDate combination
        boolean duplicateEffAndTerm = validatedList.stream()
                .anyMatch(e -> e.getContractEffDate().isEqual(code.getContractEffDate()) &&
                        e.getContractTermDate().isEqual(code.getContractTermDate()));

        if (duplicateEffAndTerm) {
            throw new IntegrationInvalidException("Duplicate ContractEffDate and TermDate pair found: " +
                    code.getContractEffDate() + " - " + code.getContractTermDate());
        }

        // Rule 4: Check for overlapping with existing validated entries
        for (ContractCode existing : validatedList) {
            // Overlap: Start is before existing's end && end is after existing's start
            boolean overlaps = !(code.getContractEffDate().isAfter(existing.getContractTermDate()) ||
                    code.getContractTermDate().isBefore(existing.getContractEffDate()));

            if (overlaps) {
                throw new IntegrationInvalidException("Contract period overlaps with existing: " +
                        existing.getContractEffDate() + " - " + existing.getContractTermDate() +
                        " vs " + code.getContractEffDate() + " - " + code.getContractTermDate());
            }
        }

        validatedList.add(code);
    }

    // At this point, validatedList contains all validated entries including the new one
    log.info("All contract codes validated successfully. Count: {}", validatedList.size());
}