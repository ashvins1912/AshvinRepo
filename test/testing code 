import java.time.LocalDate;
import java.util.*;

public class ContractValidator {

    public static void validateAndInsert(List<ContractCode> contractCodeList, ContractCode newContract) {
        contractCodeList = new ArrayList<>(contractCodeList); // Defensive copy
        contractCodeList.add(newContract);

        // Sort by effective date
        contractCodeList.sort(Comparator.comparing(ContractCode::getContractEffDate));

        Set<LocalDate> effDates = new HashSet<>();
        Set<String> effTermPairs = new HashSet<>();

        List<ContractCode> result = new ArrayList<>();

        for (int i = 0; i < contractCodeList.size(); i++) {
            ContractCode current = contractCodeList.get(i);
            LocalDate eff = current.getContractEffDate();
            LocalDate term = current.getContractTermDate();

            if (!eff.isBefore(term)) {
                throw new IntegrationInvalidException("EffDate must be before TermDate: " + eff + " - " + term);
            }

            if (!effDates.add(eff)) {
                throw new IntegrationInvalidException("Duplicate EffDate found: " + eff);
            }

            String key = eff + "_" + term;
            if (!effTermPairs.add(key)) {
                throw new IntegrationInvalidException("Duplicate EffDate and TermDate pair: " + eff + " - " + term);
            }

            if (i > 0) {
                ContractCode prev = result.get(result.size() - 1);
                LocalDate prevEff = prev.getContractEffDate();
                LocalDate prevTerm = prev.getContractTermDate();

                if (!eff.isAfter(prevTerm)) {
                    LocalDate adjustedTerm = eff.minusDays(1);
                    if (!adjustedTerm.isBefore(prevEff)) {
                        prev.setContractTermDate(adjustedTerm);
                    } else {
                        throw new IntegrationInvalidException("Overlap conflict cannot be resolved: " +
                            prevEff + " - " + prevTerm + " vs " + eff + " - " + term);
                    }
                }
            }

            result.add(current);
        }

        // Update the original list if needed
        contractCodeList.clear();
        contractCodeList.addAll(result);
    }
}