public void validateAndInsertWithTermDateAdjustment(List<ContractCode> existingList, ContractCode newEntry) {
    // 1. Basic check
    if (!newEntry.getContractEffDate().isBefore(newEntry.getContractTermDate())) {
        throw new IntegrationInvalidException("Effective date must be before term date.");
    }

    // 2. Sort existing entries by effective date
    existingList.sort(Comparator.comparing(ContractCode::getContractEffDate));

    for (ContractCode existing : existingList) {
        // Rule: No duplicate EffDate
        if (existing.getContractEffDate().isEqual(newEntry.getContractEffDate())) {
            throw new IntegrationInvalidException("Duplicate effective date: " + newEntry.getContractEffDate());
        }

        // Rule: No duplicate EffDate+TermDate
        if (existing.getContractEffDate().isEqual(newEntry.getContractEffDate()) &&
            existing.getContractTermDate().isEqual(newEntry.getContractTermDate())) {
            throw new IntegrationInvalidException("Duplicate contract period.");
        }

        // Check for overlap
        boolean overlaps = !(newEntry.getContractEffDate().isAfter(existing.getContractTermDate()) ||
                             newEntry.getContractTermDate().isBefore(existing.getContractEffDate()));

        if (overlaps) {
            // Try to adjust the existing Contract's TermDate
            LocalDate adjustedTermDate = newEntry.getContractEffDate().minusDays(1);

            // Validate adjusted term date
            if (adjustedTermDate.isAfter(existing.getContractEffDate())) {
                // Ensure adjusted does not conflict with other entries
                for (ContractCode other : existingList) {
                    if (!other.equals(existing)) {
                        boolean stillOverlaps = !(adjustedTermDate.isBefore(other.getContractEffDate()) ||
                                                  existing.getContractEffDate().isAfter(other.getContractTermDate()));
                        if (stillOverlaps) {
                            throw new IntegrationInvalidException("Adjusted contract date conflicts with another contract.");
                        }
                    }
                }

                // All clear – apply adjustment
                existing.setContractTermDate(adjustedTermDate);
                log.info("Adjusted existing contract: {} – {}", existing.getContractEffDate(), existing.getContractTermDate());

            } else {
                throw new IntegrationInvalidException("Cannot adjust contract safely — resulting term date is before effective date.");
            }
        }
    }

    // Add the new entry
    existingList.add(newEntry);
    existingList.sort(Comparator.comparing(ContractCode::getContractEffDate));

    log.info("Contract code inserted successfully. Updated size: {}", existingList.size());
}