public void validateAndInsertContractCode(List<ContractCode> existingList, ContractCode newEntry) {

    // 1. Basic rule: EffDate must be before TermDate
    if (!newEntry.getContractEffDate().isBefore(newEntry.getContractTermDate())) {
        throw new IntegrationInvalidException("Effective date must be before term date.");
    }

    // 2. Sort existing list by EffDate
    existingList.sort(Comparator.comparing(ContractCode::getContractEffDate));

    for (ContractCode existing : existingList) {

        // 3. Rule: No duplicate EffDate
        if (existing.getContractEffDate().isEqual(newEntry.getContractEffDate())) {
            throw new IntegrationInvalidException("Duplicate Effective Date: " + newEntry.getContractEffDate());
        }

        // 4. Rule: No duplicate (EffDate + TermDate)
        if (existing.getContractEffDate().isEqual(newEntry.getContractEffDate()) &&
            existing.getContractTermDate().isEqual(newEntry.getContractTermDate())) {
            throw new IntegrationInvalidException("Duplicate Effective + Term Date pair: " + newEntry.getContractEffDate());
        }

        // 5. Overlap check:
        boolean overlaps = !(newEntry.getContractEffDate().isAfter(existing.getContractTermDate()) ||
                             newEntry.getContractTermDate().isBefore(existing.getContractEffDate()));

        if (overlaps) {
            throw new IntegrationInvalidException(
                "Contract date range overlaps with existing: [" +
                existing.getContractEffDate() + " - " + existing.getContractTermDate() + "]"
            );
        }
    }

    // If all checks pass, insert the new contract
    existingList.add(newEntry);
    existingList.sort(Comparator.comparing(ContractCode::getContractEffDate));

    log.info("Contract code inserted successfully. New list size: {}", existingList.size());
}